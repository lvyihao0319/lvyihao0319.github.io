<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[跨域]]></title>
    <url>%2F2019%2F05%2F15%2F%E8%B7%A8%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[讲到跨域不得不提到一个同源策略。 1. 同源策略 是浏览器安全策略，用来保证浏览器的安全运行。 要求协议名、域名、端口号必须完全一致 2. 跨域 违背同源策略就会产生跨域 3. 产生跨域的原因在开发的时候，会有不同的服务器去提供不同的功能，往往可能有多台服务器去提供我们开发项目的功能，这时候我们会发现多台服务器对应的域名地址都不一样，这个时候就会有跨域的需求。 4. 解决跨域问题有jsonp cors 服务器代理。。。等方法，下面主要介绍jsonp jsonp 前端的实现规则1234567891011//创建script标签let script = document.createElement('script');//设置一个回调函数function getData(data) &#123; //数据请求回来会被触发 console.log(data);&#125;//设置script的src属性（请求地址）script.src = 'http://localhost:3000?callback=getData';//让script标签生效document.body.appendChild(script); 利用script标签天然可以跨域的属性，在请求的时候将参数传递上去，当请求成功的时候，就会自动的调用getData这个函数，处理数据。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[函数节流和函数防抖]]></title>
    <url>%2F2019%2F05%2F15%2F%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%2F</url>
    <content type="text"><![CDATA[1. 什么是函数节流？函数节流：一个函数执行一次后，只有在大于设定的执行周期后才会执行第二次。 比如有个需要频繁触发的函数，出于优化性能的角度，我们让他在规定的时间之内，只让函数触发的第一次生效，后面就不让他生效 123456789101112131415161718192021222324/** * 节流函数 * @para fn 要被节流的函数 * @para delay 规定的时间 */function throttle (fn, delay) &#123; //记录上一次函数触发的时间 let lastTime = 0; //闭包 return function () &#123; //记录当前函数触发的时间 let nowTime = Date.now(); //判断如果当前执行的时间大于上一次执行的时间，才执行该函数 if (nowTime - lastTime &gt; delay)&#123; fn().call(this);//嵌套多层函数，为了让this指向没有问题，将当前函数的this传入到fn //同步时间 lastTime = nowTime; &#125; &#125;&#125;//测试document.onscroll = throttle (function () &#123; console.log('scroll事件被触发了' + Date.now());&#125;, 200); 测试之前，将浏览器body调成500%，使其出现滚动条，按f12观察控制台输出情况。 12345&lt;style&gt; html , body &#123; height: 500%; &#125;&lt;/style&gt; 那么通过节流函数呢，我们可以极大的减少函数调用的次数，从而去优化性能。 2. 什么是函数防抖？函数防抖：一个需要频繁触发的函数，在我规定的时间内，只让最后一次生效，前面的不生效。 1234567891011121314151617181920212223/** * 防抖函数 * @para fn 要被防抖的函数 * @para delay 规定的时间 */function debounce(fn, delay) &#123; //记录上一次的延时器 let timer = null; //闭包 return function () &#123; //清除上一次的延时器 clearTimeout(timer); //设定一个新的延时器 timer = setTimeout(function () &#123; fn().apply(this);//修正this指向 &#125;,delay); &#125;&#125;//测试document.getElementById('btn').onclick = debounce(function () &#123; console.log('点击事件触发' + Date.now());&#125;,1000); 测试之前加一个按钮，来绑定事件。 1&lt;button id = "btn"&gt;按钮&lt;/button&gt; 打开浏览器，调出控制台，点击按钮的时候，明显出现了延迟，连续点击按钮，事件不触发，一定要等到，点完一次之后，过了一秒再点击，才会重新触发。那么通过防抖函数，也能实现性能的优化。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在Hexo的next主题添加gitalk评论功能]]></title>
    <url>%2F2019%2F05%2F15%2F%E5%A6%82%E4%BD%95%E5%9C%A8Hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0gitalk%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[本文将介绍如何为你的Hexo的next主题添加gitalk评论功能！ 1. 前言前言都是废话，想直接了解的，跳到第二条^-^ 这个集成评论功能有点头疼，一直在我心里面是一块石头，一个博客只能看不能评论总是不得劲儿，虽然评论的人也很少哈哈哈。。。但是我就是这么一个追求完美的男人！。。在尝试添加评论的时候，我首先选择了一股脑地上网搜，但是网上的教程基本都过时了，于是我自己开始研究next主题下的_config.yml文件，终于被我发现了端倪。 但是我首先看到的是gitment，我看这个ment总会和comment有点关联，自己尝试了一下无果，于是我开始上网搜索怎么使用，按照网上的教程，我一下子就弄好了，也成功显示了评论窗口，但是我初始化评论的时候，出现了问题，怎么点都没反应，又尝试了很久，但是无果。但是我是那么轻言放弃的人嘛，显然不是。我再一次研究_config.yml文件，在下面我发现了gitalk，于是曙光来了，好了言归正传我们开始！ 2. 注册一个app到github注册一个OAuth Application：https://github.com/settings/applications/new 请注意里面的AppName随便写，重点是app的回调URL，一定要写你的博客网址。记下 client_id 和 client_secret，等下要用到。 3. 启用gitalk打开你主题下面的 _config.yaml 文件。修改下面的内容： 12345678gitalk: enable: true githubID: xxx //你的github ID，用来说明你是个人还是某个组织的，一定需要； repo: xxx.github.io //这里repo就随便新建一个就行，或者直接就写博客的库； ClientID: xxx //上面叫你记下来的 ClientSecret: xxx //上面叫你记下来的 adminUser: xxx //你的admin 用户名，通常就是你自己 distractionFreeMode: true 4. 最后一步常规操作 1234hexo cleanhexo ghexo s hexo d 部署到云端的时候，提示你没有找到issues，登录一下，过一会儿，或者清缓存就成功了。 5. 总结好了，经过这样，你的next主题下的gitalk评论就搞定了，不信的话，你可以在下方评论一下，测试一下。欢迎来反馈我。如果你遇到了任何问题，下面留言，我会一一回复！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Hexo-Next主题博客的美化]]></title>
    <url>%2F2019%2F05%2F14%2F%E5%9F%BA%E4%BA%8EHexo-Next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[本文将介绍如何去美化一个基于Next主题的博客！ 1. 基础设置1.1 设置站点名、作者昵称和站点描述打开根目录下的config.yml 12345678# Sitetitle: Jacob&apos;s Notessubtitle: Quick notesdescription: 胡编一通，乱写一气keywords: 胡编一通，乱写一气author: Jacoblanguage: zh-CNtimezone: 1.2 NexT主题的安装博客所在目录下打开：git bash 1git clone https://github.com/theme-next/hexo-theme-next themes/next 1.3 启用主题打开根目录下的：_config.yml 1theme: next 2. 主题设定2.1 选择主题打开：themes/next/ 下的：_config.yml,查找scheme，可以看到如下四种不同的风格方案： 1234#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 2.2 设置中文框架默认的语言是英文。前往根目录下的：_config.yml，查找language 1language: zh-CN 2.3 设置菜单和对应的页面打开：themes/next/ 下的：_config.yml，查找menu 123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat ||之前的值是目标链接，之后的是分类页面的图标 1hexo new page &quot;categories&quot; 此时在根目录的source文件夹下会生成一个categories文件，文件中有一个index.md文件，修改内容如下 123title: 文章分类date: 2017-12-14 13:05:38type: &quot;categories&quot; 3. 美化3.1 设置头像打开：themes/next/下的：_config.yml，查找avatar 1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: http://XXXXXXXXX 站点内地址：图放至themes/next/source/images/配置为：avatar: /images/图片名 3.2 背景动画进入theme/next目录，执行命令： 1git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest 这时将配置文件_config.yml中 1canvas_nest: true 3.3 文章底部标签显示的优化修改：/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成 1&lt;code&gt;rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&lt;/code&gt; 3.4 文章添加阴影、透明效果打开：theme/next/source/css/_custom/custom.styl，添加以下代码 123456789// 主页文章添加阴影效果.post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; background:rgba(255,255,255,0.9) none repeat scroll !important; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 3.5 点击侧栏头像回到首页修改：/themes/next/layout/_macro/sidebar.swig，如下代码： 12345&lt;a href=&quot;/&quot;&gt; &lt;img class=&quot;site-author-image&quot; itemprop=&quot;image&quot; src=&quot;&#123;&#123; url_for( theme.avatar | default(theme.images + &apos;/avatar.gif&apos;) ) &#125;&#125;&quot; alt=&quot;&#123;&#123; theme.author &#125;&#125;&quot; /&gt;&lt;/a&gt; 3.6 新建文章时，在相同目录下创建同名文件夹（便于图片管理）打开站点配置文件：_config.yml，搜索post_asset_folder字段，设置其值为true,然后安装hexo-asset-image 1cnpm install hexo-asset-image --save 此时hexo new “fileName”会在:/source/_posts目录下创建同名的文件夹只需在 .md 文件里使用 ![title]括号（图片名） ，无需路径名就可以插入图片。 3.7 首页显示文章摘要（阅读全文）打开:themes/next/下的:_config.yml，查找excerpt 1234auto_excerpt: //自动摘录 enable: true length: 150 //摘录字数read_more_btn: true //显示全文按钮 3.8 给页面添加背景图片打开:theme/next/source/css/_custom/custom.styl，添加以下代码： 1234567891011body &#123; /*background: url(/images/blogbk.jpg) no-repeat;*/ /* 背景图垂直、水平均居中 */ background-position: center center; /* 当内容高度大于图片高度时，背景图像的位置相对于viewport固定 */ background-attachment: fixed; /* 让背景图基于容器大小伸缩 */ background-size: cover; /* 设置背景颜色，背景图加载过程中会显示背景色 */ background-color: rgba(0, 0, 0, 0.5);&#125; 3.9 文字背景以及半透明的设置打开:theme/next/source/css/_custom/custom.styl，添加以下代码： 12345.content &#123; border-radius: 20px; //文章背景设置圆角 padding: 30px 60px 30px 60px; background:rgba(255, 255, 255, 0.8) none repeat scroll !important;&#125; 3.10 去除NexT主题Markdown分割线渲染效果修改:/source/css/_common/scaffolding/base.styl，注释或删除以下内容： 1234567background-image: repeating-linear-gradient( -45deg, white, white 4px, transparent 4px, transparent 8px ); 3.11 图片可点击放大查看，放大后可关闭打开站点配置文件:_config.yml，搜索fancybox字段，设置其值为true 进入到:theme/text/文件夹下，打开:git bash 1git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox 3.12 博客总访问量统计打开themes/next/下的_config.yml，查找busuanzi 12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 打开:/themes/next/layout/_partials/footer.swig，在最后添加如下内容： 12&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访问次数：&lt;span class=&quot;busuanzi-value&quot; id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;&lt;/span&gt; 3.13 文章末尾添加版权声明查找主题配置文件:themes/next/_config.yml中的creative_commons 12345creative_commons: license: by-nc-sa sidebar: false post: true # 将false改为true即可显示版权信息 language: 3.14 搜索功能安装搜索插件： hexo-generator-searchdb 1$ npm install hexo-generator-searchdb --save 安装完成，编辑博客配置文件：_config.yml 12345search: path: search.xml field: post format: html limit: 10000 Next 主题自带搜索设置，编辑主题配置文件：_config.yml,找到文件中 Local search 的相关配置，设为 true 123# Local searchlocal_search: enable: true 4 hexo 重新部署1234hexo cleanhexo ghexo shexo d]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Next主题美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Linux云服务器上配置Tomcat]]></title>
    <url>%2F2019%2F05%2F13%2F%E5%9C%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%85%8D%E7%BD%AETomcat%2F</url>
    <content type="text"><![CDATA[本文将介绍如何在Linux云服务器上或者Linux本地服务器上部署Tomcat环境！ 1. 事先准备在部署之前，提前从官网上下载好对应的tomcat和jdk，jdk1.8之前的下载需要账号密码，在我的上一篇文章里有可以使用。 这里特别提醒一下：由于是在linux系统上部署，tomcat需要下载以.tar.gz结尾的压缩包，可以为后续节省很多麻烦，jdk则要下载Linux64位的。 我使用的是apache-tomcat-9.0.19和jdk-8u191-linux-x64.tar 2. 将两个压缩包传入服务器中本地可以下载一个叫做：SecureFX的软件来进行上传文件的操作，连接服务器并且上传压缩包至/opt目录下。 3. 解压文件并删除压缩包1234cd /opttar -zxvf apache-tomcat-9.0.19.tar.gztar -zxvf jdk-8u191-linux-x64.tar.gzrm -rf *.tar.gz 4. 配置jdk1vim /etc/profile 进入到最底下，补充以下代码： 1234export JAVA_HOME=/opt/jdk1.8.0_191export JRE_HOME=/opt/jdk1.8.0_191/jreexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 再不重启服务器的情况下，让配置文件生效并查看安装的版本 12source /etc/profilejava -version 5. 打开防火墙对应的端口号,并重新加载防火墙12firewall-cmd --zone=public --add-port=80/tcp --permanentfirewall-cmd --reload 6. 建一个存放项目的文件夹12cd /optmkdir www 7. 配置tomcat启动路径将本地的项目上传到www目录之下，然后 12cd apache-tomcat-9.0.19/confvim server.xml 在server.xml中修改端口号8080成80并在最下面的前面加入下面代码 123//以下是我的代码，你们需要自己对应修改&lt;Context docBase=&quot;/opt/www/h5projects/MHWZ/&quot; path=&quot;/mhwz&quot; reloadable=&quot;false&quot;&lt;/Context&gt;&lt;Context docBase=&quot;/opt/www/h5projects/ZCOOL/&quot; path=&quot;/zcool&quot; reloadable=&quot;false&quot;&gt;&lt;/Context&gt; 8. 启动tomcat12cd ../bin./startup.sh &amp;&amp; tail -f ../logs/catalina.out //启动tomcat并查看日志 9. 运行项目因为端口设置成80所以直接在浏览器中输入ip/你设置的项目的虚拟路径/主页，就成功了。 1ip/mhwz/mhwz.html 10 .附上一些常用代码12ps -ef | grep tomcat //查询进程kill -9 1060 //彻底关闭tomcat，这个1060是查询出来的进程]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>linux云服务器 tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jdk下载账号]]></title>
    <url>%2F2019%2F05%2F13%2Fjdk%E4%B8%8B%E8%BD%BD%E8%B4%A6%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[目前在官网下载低于jdk1.8的java jdk的时候需要登陆，从网上收藏了这个账号可以下载用 122696671285@qq.com 密码：Oracle123]]></content>
      <categories>
        <category>账号</category>
      </categories>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建gitlab服务器]]></title>
    <url>%2F2019%2F05%2F12%2F%E6%90%AD%E5%BB%BAgitlab%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[1. 上传gitlab压缩包将下载好的gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm上传到linux服务器的/opt上 2. 执行安装12cd /optvim install.sh 在install.sh中拷贝下面的代码 12345678sudo rpm -ivh /opt/gitlab-ce-10.8.2-ce.0.el7.x86_64.rpmsudo yum install -y curl policycoreutils-python openssh-server croniesudo lokkit -s http -s sshsudo yum install postfixsudo service postfix startsudo chkconfig postfix oncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bashsudo EXTERNAL_URL=&quot;http://gitlab.example.com&quot; yum -y install gitlab-ce 改一下install.sh的权限，使其可以执行 1chmod 755 install.sh 执行之前为了保险，为linux系统拍摄一个快照执行install.sh 1./install.sh 时间比较长需要等，执行完毕后重启linux 1reboot 3. gitlab服务操作123gitlab-ctl reconfigure //初始化配置 gitlab（时间很久！）gitlab-ctl start //启动 gitlab 服务gitlab-ctl stop //停止 gitlab 服务 4. 浏览器访问1service firewalld stop //停止防火墙 访问 Linux 服务器 IP 地址即可，如果想访问 EXTERNAL_URL 指定的域名还需要配置域名服务器或本地 hosts 文件。初次登录时需要为 gitlab 的 root 用户设置密码。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装本地的Linux的CentOS7]]></title>
    <url>%2F2019%2F05%2F12%2F%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0%E7%9A%84Linux%E7%9A%84CentOS7%2F</url>
    <content type="text"><![CDATA[1. 新建虚拟机 按照默认提示下一步，到处理器的配置选择两个双核的 虚拟机的内存设置为：2048MB 使用NAT 2. 安装系统 选择中文 到了-安装信息摘要-的地方，等一会儿 点击-软件选择- 选中-GNOME桌面-，-传统X Windows系统的兼容性-，-完成- 然后选择-安装位置- 选择-我要配置分区- 点击-完成- 点击-自动创建- 设置root密码 等待安装，并重启 3. 设置ip地址打开终端 1234cd /etc/sysconfig/network-scriptsll|lesssu rootvim ifcfg-ens33 编辑ifcfg-ens33文件 4. 查看是否配置成功，并且ping一下外网12ifconfigping www.baidu.com -c 3 5. windows ping一下linux1ping xxx.xxx.xx.xxx]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建一个简易博客]]></title>
    <url>%2F2019%2F05%2F11%2F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本文将介绍如何搭建一个基于Hexo的个人博客！ 1. 本地搭建1.1 下载并安装Node.js和git其中npm会和Node.js一起装进来，不需要单独下载 1.2 安装淘宝镜像cnpm1npm install -g cnpm --registry=https://registry.npm.taobao.org 1.3 安装hexo-cli1cnpm install -g hexo-cli 1.4 查看hexo是否安装成功1hexo -v 找一个合适的位置建一个空文件夹，进入该目录下.. 1.5 初始化一个博客1hexo init Linux下在前面加上：sudo 1.6 启动预览博客1hexo s 在浏览器输入localhost:4000本地预览博客 1.7 停止预览按住：control+c 1.8 写一篇文章1hexo n &quot;我的第一篇文章&quot; 找到生成的.md文件，用各种编辑器就可以写文章 1.9 重新预览博客每次重新预览最好做以下步骤 123hexo clean // 清除缓存hexo g //生成本地文件hexo s 2. 云端部署2.1 安装hexo-deployer-git1cnpm install --save hexo-deployer-git 2.2 配置_config.yml1234deploy: type: git repo: https://github.com/yourname/yourname.github.io.git branch: master 注意冒号后面要加空格 2.3 部署到github1hexo d 3. 总结至此一个简易的、基础的博客搭建完成！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>简易博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git和github之间的操作]]></title>
    <url>%2F2019%2F05%2F10%2Fgit%E5%92%8Cgithub%E4%B9%8B%E9%97%B4%E7%9A%84%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[1. 注册github账号，并创建远程库唯一要注意的一点就是绑定邮箱不要用163的，因为有时可能会接收不到github的邮件，这里推荐可以用aliyun的邮箱 2. 创建远程库地址别名12git remote -v //查看当前所有远程地址别名git remote add [别名] [远程地址] 3. 推送1git push [别名] [分支名] 4. 克隆1git origin [远程地址] 克隆的效果 完整的把远程库下载到本地 创建 origin 远程地址别名 初始化本地库 5. 拉取pull=fetch+merge 123git fetch [远程库地址别名] [远程分支名]git merge [远程库地址别名/远程分支名]git pull [远程库地址别名] [远程分支名] 6. SSH登录进入当前用户的家目录 1$ cd ~ 删除.ssh 目录 1$ rm -rvf .ssh 运行命令生成.ssh 密钥目录 12$ ssh-keygen -t rsa -C xxxx@aliyun.com[注意：这里-C 这个参数是大写的 C] 进入.ssh 目录查看文件列表 12$ cd .ssh$ ls -lF 查看 id_rsa.pub 文件内容 1$ cat id_rsa.pub 复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPGkeys→New SSH Key→输入复制的密钥信息 回到 Git bash 创建远程地址别名 1git remote add origin_ssh git@github.com:xxx/xxx.git]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git &amp; github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git的命令行操作]]></title>
    <url>%2F2019%2F05%2F10%2Fgit%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[1. 本地库初始化1git add 2. 设置签名项目级别/仓库级别：仅在当前本地库范围内有效 12git config user.name jacobgit config user.email xxxx@163.com 系统用户级别：登录当前操作系统的用户范围 12git config --global user.name jacobgit config --global xxxx@163.com 信息保存位置：~/.gitconfig 文件 3. 基本操作1234git status //查看工作区、暂存区状态git add [file name] //将工作区的“新建/修改”添加到暂存区git commit -m &quot;commit message&quot; [file name] //将暂存区的内容提交到本地库git reflog //查看历史记录，多屏显示控制方式：空格向下翻页，b 向上翻页，q 退出 4. 前进和后退版本基于索引值操作[推荐] 1git reset --hard a6ace91 5. 比较文件差异12git diff [文件名] //将工作区中的文件和暂存区进行比较git diff [本地库中历史版本] [文件名] //将工作区中的文件和本地库历史记录比较 6. 分支操作12345git branch [分支名] //git branch [分支名]git branch -v //查看分支git checkout [分支名] //切换分支git checkout [被合并分支名] //合并分支第一步：切换到接受修改的分支（被合并，增加新内容）上git merge [有新内容分支名] //第二步执行 merge 命令 7. 解决冲突 编辑文件，删除特殊符号 把文件修改到满意的程度，保存退出 git add [文件名] git commit -m “日志信息” （注意：此时 commit 一定不能带具体文件名）]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
