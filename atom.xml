<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jacob&#39;s Notes</title>
  
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-15T15:21:02.149Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jacob</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue的MVVM实现原理</title>
    <link href="http://yoursite.com/2019/05/15/Vue%E7%9A%84MVVM%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/05/15/Vue的MVVM实现原理/</id>
    <published>2019-05-15T15:09:17.000Z</published>
    <updated>2019-05-15T15:21:02.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Vue作为MVVM模式的实现库的2种技术"><a href="#1-Vue作为MVVM模式的实现库的2种技术" class="headerlink" title="1. Vue作为MVVM模式的实现库的2种技术"></a>1. Vue作为MVVM模式的实现库的2种技术</h2><h3 id="1-1-模板解析：实现初始化显示"><a href="#1-1-模板解析：实现初始化显示" class="headerlink" title="1.1 模板解析：实现初始化显示"></a>1.1 模板解析：实现初始化显示</h3><ul><li>解析大括号表达式</li><li>解析指令</li></ul><h3 id="1-2-数据绑定：实现更新显示"><a href="#1-2-数据绑定：实现更新显示" class="headerlink" title="1.2 数据绑定：实现更新显示"></a>1.2 数据绑定：实现更新显示</h3><ul><li>通过数据劫持实现</li></ul><h2 id="2-原理结构图"><a href="#2-原理结构图" class="headerlink" title="2 原理结构图"></a>2 原理结构图</h2><p><img src="/2019/05/15/Vue的MVVM实现原理/原理结构图.png" alt="原理结构图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Vue作为MVVM模式的实现库的2种技术&quot;&gt;&lt;a href=&quot;#1-Vue作为MVVM模式的实现库的2种技术&quot; class=&quot;headerlink&quot; title=&quot;1. Vue作为MVVM模式的实现库的2种技术&quot;&gt;&lt;/a&gt;1. Vue作为MVVM模式的实现库的
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>比较React与Vue</title>
    <link href="http://yoursite.com/2019/05/15/%E6%AF%94%E8%BE%83React%E4%B8%8EVue/"/>
    <id>http://yoursite.com/2019/05/15/比较React与Vue/</id>
    <published>2019-05-15T14:30:25.000Z</published>
    <updated>2019-05-15T15:01:07.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-相同点"><a href="#1-相同点" class="headerlink" title="1. 相同点"></a>1. 相同点</h2><ul><li><p>都有组件化开发和<em>Virtual Dom</em></p></li><li><p>都支持<em>props</em>进行父子组件间数据的通信</p></li><li><p>都支持数据驱动视图，不直接操作真实的<em>DOM</em>，更新状态数据界面就自动更新</p></li><li><p>都支持服务器渲染</p></li><li><p>都有支持<em>native</em>的方案，<em>React</em>的<em>React Native</em>，<em>Vue</em>的<em>Weex</em></p><p><strong>组件化：提高界面功能编码的复用</strong></p><p><strong>虚拟DOM：提高程序的运行效率</strong></p><p><strong>props：标签属性</strong></p><p><strong>数据驱动：只要更新状态数据，对应的界面就会自动变化</strong></p><p><strong>native：跨平台的原生应用</strong></p></li></ul><h2 id="2-不同点"><a href="#2-不同点" class="headerlink" title="2. 不同点"></a>2. 不同点</h2><ul><li>数据绑定：<em>Vue</em>实现了数据的双向绑定；<em>React</em>数据流动是单向的。</li><li>组件写法：<em>React</em>推荐的做法是<em>JSX</em>，也就是把<em>HTML</em>和<em>CSS</em>全都写进<em>JS</em>里面，有一个概念叫做<em>all in js</em>；<em>Vue</em>有一个概念叫模板，推荐的做法是<em>webpack+vue+loader</em>的单文件组件格式，即<em>html，js，css</em>写在同一个文件。</li><li>状态变化：<em>state</em>对象在<em>React</em>应用中不可变，需要用<em>setState</em>方法更新状态；在<em>Vue</em>中<em>state</em>的对象不是必须的，数据由<em>data</em>属性在Vue对象中管理。</li><li><em>Virtual Dom</em>：<em>Vue</em>会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树；对于<em>React</em>而言，每当应用的状态被改变的时候，全部组件都会重新渲染，所以<em>React</em>中需要<em>shouldComponentUpdate</em>这个生命周期函数方法来控制。</li><li><em>React</em>严格上只针对<em>MVC</em>的<em>view</em>层；<em>Vue</em>则是<em>MVVM</em>模式。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-相同点&quot;&gt;&lt;a href=&quot;#1-相同点&quot; class=&quot;headerlink&quot; title=&quot;1. 相同点&quot;&gt;&lt;/a&gt;1. 相同点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;都有组件化开发和&lt;em&gt;Virtual Dom&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;都
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="React&amp;Vue" scheme="http://yoursite.com/tags/React-Vue/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="http://yoursite.com/2019/05/15/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2019/05/15/跨域/</id>
    <published>2019-05-15T13:50:20.000Z</published>
    <updated>2019-05-15T14:12:40.368Z</updated>
    
    <content type="html"><![CDATA[<p>讲到跨域不得不提到一个同源策略。</p><h2 id="1-同源策略"><a href="#1-同源策略" class="headerlink" title="1. 同源策略"></a>1. 同源策略</h2><ul><li>是浏览器安全策略，用来保证浏览器的安全运行。</li><li>要求协议名、域名、端口号必须完全一致</li></ul><h2 id="2-跨域"><a href="#2-跨域" class="headerlink" title="2. 跨域"></a>2. 跨域</h2><ul><li>违背同源策略就会产生跨域</li></ul><h2 id="3-产生跨域的原因"><a href="#3-产生跨域的原因" class="headerlink" title="3. 产生跨域的原因"></a>3. 产生跨域的原因</h2><p>在开发的时候，会有不同的服务器去提供不同的功能，往往可能有多台服务器去提供我们开发项目的功能，这时候我们会发现多台服务器对应的域名地址都不一样，这个时候就会有跨域的需求。</p><h2 id="4-解决跨域问题"><a href="#4-解决跨域问题" class="headerlink" title="4. 解决跨域问题"></a>4. 解决跨域问题</h2><p>有<em>jsonp</em> <em>cors</em> 服务器代理。。。等方法，下面主要介绍<em>jsonp</em></p><h3 id="jsonp-前端的实现规则"><a href="#jsonp-前端的实现规则" class="headerlink" title="jsonp 前端的实现规则"></a>jsonp 前端的实现规则</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建script标签</span></span><br><span class="line"><span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line"><span class="comment">//设置一个回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//数据请求回来会被触发</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置script的src属性（请求地址）</span></span><br><span class="line">script.src = <span class="string">'http://localhost:3000?callback=getData'</span>;</span><br><span class="line"><span class="comment">//让script标签生效</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br></pre></td></tr></table></figure><p>利用<code>script</code>标签天然可以跨域的属性，在请求的时候将参数传递上去，当请求成功的时候，就会自动的调用getData这个函数，处理数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;讲到跨域不得不提到一个同源策略。&lt;/p&gt;
&lt;h2 id=&quot;1-同源策略&quot;&gt;&lt;a href=&quot;#1-同源策略&quot; class=&quot;headerlink&quot; title=&quot;1. 同源策略&quot;&gt;&lt;/a&gt;1. 同源策略&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是浏览器安全策略，用来保证浏览器的安全运行。
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="跨域" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>函数节流和函数防抖</title>
    <link href="http://yoursite.com/2019/05/15/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/"/>
    <id>http://yoursite.com/2019/05/15/函数节流和函数防抖/</id>
    <published>2019-05-15T12:48:40.000Z</published>
    <updated>2019-05-15T14:05:03.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是函数节流？"><a href="#1-什么是函数节流？" class="headerlink" title="1. 什么是函数节流？"></a>1. 什么是函数节流？</h2><p>函数节流：一个函数执行一次后，只有在大于设定的执行周期后才会执行第二次。</p><ul><li>比如有个需要频繁触发的函数，出于优化性能的角度，我们让他在规定的时间之内，只让函数触发的第一次生效，后面就不让他生效</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流函数</span></span><br><span class="line"><span class="comment"> * @para fn 要被节流的函数</span></span><br><span class="line"><span class="comment"> * @para delay 规定的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//记录上一次函数触发的时间</span></span><br><span class="line">    <span class="keyword">let</span> lastTime = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//记录当前函数触发的时间</span></span><br><span class="line">        <span class="keyword">let</span> nowTime = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="comment">//判断如果当前执行的时间大于上一次执行的时间，才执行该函数</span></span><br><span class="line">        <span class="keyword">if</span> (nowTime - lastTime &gt; delay)&#123;</span><br><span class="line">            fn().call(<span class="keyword">this</span>);<span class="comment">//嵌套多层函数，为了让this指向没有问题，将当前函数的this传入到fn</span></span><br><span class="line">            <span class="comment">//同步时间</span></span><br><span class="line">            lastTime = nowTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">document</span>.onscroll = throttle (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'scroll事件被触发了'</span> + <span class="built_in">Date</span>.now());</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p>测试之前，将浏览器<code>body</code>调成500%，使其出现滚动条，按<code>f12</code>观察控制台输出情况。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html , body &#123;</span></span><br><span class="line"><span class="undefined">        height: 500%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么通过节流函数呢，我们可以极大的减少函数调用的次数，从而去优化性能。</p><h2 id="2-什么是函数防抖？"><a href="#2-什么是函数防抖？" class="headerlink" title="2. 什么是函数防抖？"></a>2. 什么是函数防抖？</h2><p>函数防抖：一个需要频繁触发的函数，在我规定的时间内，只让最后一次生效，前面的不生效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数</span></span><br><span class="line"><span class="comment"> * @para fn 要被防抖的函数</span></span><br><span class="line"><span class="comment"> * @para delay 规定的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//记录上一次的延时器</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//清除上一次的延时器</span></span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        <span class="comment">//设定一个新的延时器</span></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn().apply(<span class="keyword">this</span>);<span class="comment">//修正this指向</span></span><br><span class="line">        &#125;,delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick = debounce(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'点击事件触发'</span> + <span class="built_in">Date</span>.now());</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>测试之前加一个按钮，来绑定事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器，调出控制台，点击按钮的时候，明显出现了延迟，连续点击按钮，事件不触发，一定要等到，点完一次之后，过了一秒再点击，才会重新触发。那么通过防抖函数，也能实现性能的优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-什么是函数节流？&quot;&gt;&lt;a href=&quot;#1-什么是函数节流？&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是函数节流？&quot;&gt;&lt;/a&gt;1. 什么是函数节流？&lt;/h2&gt;&lt;p&gt;函数节流：一个函数执行一次后，只有在大于设定的执行周期后才会执行第二次。
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="函数" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>如何在Hexo的next主题添加gitalk评论功能</title>
    <link href="http://yoursite.com/2019/05/15/%E5%A6%82%E4%BD%95%E5%9C%A8Hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0gitalk%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2019/05/15/如何在Hexo的next主题添加gitalk评论功能/</id>
    <published>2019-05-15T08:52:58.000Z</published>
    <updated>2019-05-15T09:25:52.771Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何为你的Hexo的next主题添加gitalk评论功能！</p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>前言都是废话，想直接了解的，跳到第二条^-^</p><p>这个集成评论功能有点头疼，一直在我心里面是一块石头，一个博客只能看不能评论总是不得劲儿，虽然评论的人也很少哈哈哈。。。但是我就是这么一个追求完美的男人！。。在尝试添加评论的时候，我首先选择了一股脑地上网搜，但是网上的教程基本都过时了，于是我自己开始研究next主题下的<code>_config.yml</code>文件，终于被我发现了端倪。</p><p>但是我首先看到的是gitment，我看这个ment总会和comment有点关联，自己尝试了一下无果，于是我开始上网搜索怎么使用，按照网上的教程，我一下子就弄好了，也成功显示了评论窗口，但是我初始化评论的时候，出现了问题，怎么点都没反应，又尝试了很久，但是无果。但是我是那么轻言放弃的人嘛，显然不是。我再一次研究<code>_config.yml</code>文件，在下面我发现了gitalk，于是曙光来了，好了言归正传我们开始！</p><h2 id="2-注册一个app"><a href="#2-注册一个app" class="headerlink" title="2. 注册一个app"></a>2. 注册一个app</h2><p>到github注册一个<strong>OAuth Application</strong>：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a></p><p>请注意里面的AppName随便写，重点是app的回调URL，一定要写你的博客网址。<em>记下</em> <strong>client_id</strong> <em>和</em> <strong>client_secret</strong>，等下要用到。</p><h2 id="3-启用gitalk"><a href="#3-启用gitalk" class="headerlink" title="3. 启用gitalk"></a>3. 启用gitalk</h2><p>打开你主题下面的 <code>_config.yaml</code> 文件。修改下面的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  githubID: xxx   //你的github ID，用来说明你是个人还是某个组织的，一定需要；</span><br><span class="line">  repo: xxx.github.io//这里repo就随便新建一个就行，或者直接就写博客的库；</span><br><span class="line">  ClientID: xxx//上面叫你记下来的</span><br><span class="line">  ClientSecret: xxx//上面叫你记下来的</span><br><span class="line">  adminUser: xxx//你的admin 用户名，通常就是你自己</span><br><span class="line">  distractionFreeMode: true</span><br></pre></td></tr></table></figure><h2 id="4-最后一步"><a href="#4-最后一步" class="headerlink" title="4. 最后一步"></a>4. 最后一步</h2><p>常规操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署到云端的时候，提示你没有找到<code>issues</code>，登录一下，过一会儿，或者清缓存就成功了。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>好了，经过这样，你的next主题下的gitalk评论就搞定了，不信的话，你可以在下方评论一下，测试一下。欢迎来反馈我。如果你遇到了任何问题，下面留言，我会一一回复！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将介绍如何为你的Hexo的next主题添加gitalk评论功能！&lt;/p&gt;
&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h2&gt;&lt;p&gt;前言都是废话，想直接了解的，跳到第二
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="gitalk" scheme="http://yoursite.com/tags/gitalk/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo-Next主题博客的美化</title>
    <link href="http://yoursite.com/2019/05/14/%E5%9F%BA%E4%BA%8EHexo-Next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96/"/>
    <id>http://yoursite.com/2019/05/14/基于Hexo-Next主题博客的美化/</id>
    <published>2019-05-14T08:39:00.000Z</published>
    <updated>2019-05-15T04:19:02.841Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何去美化一个基于Next主题的博客！</p><h2 id="1-基础设置"><a href="#1-基础设置" class="headerlink" title="1. 基础设置"></a>1. 基础设置</h2><h3 id="1-1-设置站点名、作者昵称和站点描述"><a href="#1-1-设置站点名、作者昵称和站点描述" class="headerlink" title="1.1 设置站点名、作者昵称和站点描述"></a>1.1 设置站点名、作者昵称和站点描述</h3><p>打开根目录下的<code>config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Jacob&apos;s Notes</span><br><span class="line">subtitle: Quick notes</span><br><span class="line">description: 胡编一通，乱写一气</span><br><span class="line">keywords: 胡编一通，乱写一气</span><br><span class="line">author: Jacob</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><h3 id="1-2-NexT主题的安装"><a href="#1-2-NexT主题的安装" class="headerlink" title="1.2 NexT主题的安装"></a>1.2 NexT主题的安装</h3><p>博客所在目录下打开：git bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="1-3-启用主题"><a href="#1-3-启用主题" class="headerlink" title="1.3 启用主题"></a>1.3 启用主题</h3><p>打开根目录下的：_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><h2 id="2-主题设定"><a href="#2-主题设定" class="headerlink" title="2. 主题设定"></a>2. 主题设定</h2><h3 id="2-1-选择主题"><a href="#2-1-选择主题" class="headerlink" title="2.1 选择主题"></a>2.1 选择主题</h3><p>打开：themes/next/ 下的：_config.yml,查找<code>scheme</code>，可以看到如下四种不同的风格方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><h3 id="2-2-设置中文"><a href="#2-2-设置中文" class="headerlink" title="2.2 设置中文"></a>2.2 设置中文</h3><p>框架默认的语言是英文。前往根目录下的：_config.yml，查找<code>language</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure><h3 id="2-3-设置菜单和对应的页面"><a href="#2-3-设置菜单和对应的页面" class="headerlink" title="2.3 设置菜单和对应的页面"></a>2.3 设置菜单和对应的页面</h3><p>打开：themes/next/ 下的：_config.yml，查找<code>menu</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p><code>||</code>之前的值是目标链接，之后的是分类页面的图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>此时在根目录的source文件夹下会生成一个categories文件，文件中有一个index.md文件，修改内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 文章分类</span><br><span class="line">date: 2017-12-14 13:05:38</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><h2 id="3-美化"><a href="#3-美化" class="headerlink" title="3. 美化"></a>3. 美化</h2><h3 id="3-1-设置头像"><a href="#3-1-设置头像" class="headerlink" title="3.1 设置头像"></a>3.1 设置头像</h3><p>打开：themes/next/下的：_config.yml，查找<code>avatar</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.gif</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line">avatar: http://XXXXXXXXX</span><br></pre></td></tr></table></figure><p>站点内地址：图放至themes/next/source/images/配置为：avatar: /images/图片名</p><h3 id="3-2-背景动画"><a href="#3-2-背景动画" class="headerlink" title="3.2 背景动画"></a>3.2 背景动画</h3><p>进入theme/next目录，执行命令： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></table></figure><p>这时将配置文件_config.yml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure><h3 id="3-3-文章底部标签显示的优化"><a href="#3-3-文章底部标签显示的优化" class="headerlink" title="3.3 文章底部标签显示的优化"></a>3.3 文章底部标签显示的优化</h3><p>修改：/themes/next/layout/_macro/post.swig，搜索 <code>rel=”tag”&gt;#</code>，将 <code>#</code> 换成 <code><i class="fa fa-tag"></i></code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;code&gt;rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&lt;/code&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-文章添加阴影、透明效果"><a href="#3-4-文章添加阴影、透明效果" class="headerlink" title="3.4 文章添加阴影、透明效果"></a>3.4 文章添加阴影、透明效果</h3><p>打开：theme/next/source/css/_custom/custom.styl，添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line">.post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   background:rgba(255,255,255,0.9) none repeat scroll !important;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-点击侧栏头像回到首页"><a href="#3-5-点击侧栏头像回到首页" class="headerlink" title="3.5 点击侧栏头像回到首页"></a>3.5 点击侧栏头像回到首页</h3><p>修改：/themes/next/layout/_macro/sidebar.swig，如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;/&quot;&gt;</span><br><span class="line">   &lt;img class=&quot;site-author-image&quot; itemprop=&quot;image&quot;</span><br><span class="line">       src=&quot;&#123;&#123; url_for( theme.avatar | default(theme.images + &apos;/avatar.gif&apos;) ) &#125;&#125;&quot;</span><br><span class="line">       alt=&quot;&#123;&#123; theme.author &#125;&#125;&quot; /&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="3-6-新建文章时，在相同目录下创建同名文件夹（便于图片管理）"><a href="#3-6-新建文章时，在相同目录下创建同名文件夹（便于图片管理）" class="headerlink" title="3.6 新建文章时，在相同目录下创建同名文件夹（便于图片管理）"></a>3.6 新建文章时，在相同目录下创建同名文件夹（便于图片管理）</h3><p>打开站点配置文件：_config.yml，搜索<code>post_asset_folder</code>字段，设置其值为<code>true</code>,然后安装<code>hexo-asset-image</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>此时<code>hexo new “fileName”</code>会在:/source/_posts目录下创建同名的文件夹<br>只需在 .md 文件里使用<code> ![title]括号（图片名）</code> ，无需路径名就可以插入图片。</p><h3 id="3-7-首页显示文章摘要（阅读全文）"><a href="#3-7-首页显示文章摘要（阅读全文）" class="headerlink" title="3.7 首页显示文章摘要（阅读全文）"></a>3.7 首页显示文章摘要（阅读全文）</h3><p>打开:themes/next/下的:_config.yml，查找<code>excerpt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt: //自动摘录</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150 //摘录字数</span><br><span class="line">read_more_btn: true //显示全文按钮</span><br></pre></td></tr></table></figure><h3 id="3-8-给页面添加背景图片"><a href="#3-8-给页面添加背景图片" class="headerlink" title="3.8 给页面添加背景图片"></a>3.8 给页面添加背景图片</h3><p>打开:theme/next/source/css/_custom/custom.styl，添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  /*background: url(/images/blogbk.jpg) no-repeat;*/</span><br><span class="line">  /* 背景图垂直、水平均居中 */</span><br><span class="line">  background-position: center center;</span><br><span class="line">  /* 当内容高度大于图片高度时，背景图像的位置相对于viewport固定 */</span><br><span class="line">  background-attachment: fixed;</span><br><span class="line">  /* 让背景图基于容器大小伸缩 */</span><br><span class="line">  background-size: cover;</span><br><span class="line">  /* 设置背景颜色，背景图加载过程中会显示背景色 */</span><br><span class="line">  background-color: rgba(0, 0, 0, 0.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-文字背景以及半透明的设置"><a href="#3-9-文字背景以及半透明的设置" class="headerlink" title="3.9 文字背景以及半透明的设置"></a>3.9 文字背景以及半透明的设置</h3><p>打开:theme/next/source/css/_custom/custom.styl，添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.content &#123;</span><br><span class="line">border-radius: 20px; //文章背景设置圆角</span><br><span class="line">padding: 30px 60px 30px 60px;</span><br><span class="line">background:rgba(255, 255, 255, 0.8) none repeat scroll !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-10-去除NexT主题Markdown分割线渲染效果"><a href="#3-10-去除NexT主题Markdown分割线渲染效果" class="headerlink" title="3.10 去除NexT主题Markdown分割线渲染效果"></a>3.10 去除NexT主题Markdown分割线渲染效果</h3><p>修改:/source/css/_common/scaffolding/base.styl，注释或删除以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">background-image: repeating-linear-gradient(</span><br><span class="line">    -45deg,</span><br><span class="line">    white,</span><br><span class="line">    white 4px,</span><br><span class="line">    transparent 4px,</span><br><span class="line">    transparent 8px</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h3 id="3-11-图片可点击放大查看，放大后可关闭"><a href="#3-11-图片可点击放大查看，放大后可关闭" class="headerlink" title="3.11 图片可点击放大查看，放大后可关闭"></a>3.11 图片可点击放大查看，放大后可关闭</h3><p>打开站点配置文件:_config.yml，搜索<code>fancybox</code>字段，设置其值为<code>true</code></p><p>进入到:theme/text/文件夹下，打开:git bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox</span><br></pre></td></tr></table></figure><h3 id="3-12-博客总访问量统计"><a href="#3-12-博客总访问量统计" class="headerlink" title="3.12 博客总访问量统计"></a>3.12 博客总访问量统计</h3><p>打开themes/next/下的_config.yml，查找<code>busuanzi</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure><p>打开:/themes/next/layout/_partials/footer.swig，在最后添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  本站访问次数：&lt;span class=&quot;busuanzi-value&quot; id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h3 id="3-13-文章末尾添加版权声明"><a href="#3-13-文章末尾添加版权声明" class="headerlink" title="3.13 文章末尾添加版权声明"></a>3.13 文章末尾添加版权声明</h3><p>查找主题配置文件:themes/next/_config.yml中的<code>creative_commons</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true  # 将false改为true即可显示版权信息</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure><h3 id="3-14-搜索功能"><a href="#3-14-搜索功能" class="headerlink" title="3.14 搜索功能"></a>3.14 搜索功能</h3><p>安装搜索插件： hexo-generator-searchdb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>安装完成，编辑博客配置文件：_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>Next 主题自带搜索设置，编辑主题配置文件：_config.yml,找到文件中 <code>Local search</code> 的相关配置，设为 <code>true</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h2 id="4-hexo-重新部署"><a href="#4-hexo-重新部署" class="headerlink" title="4 hexo 重新部署"></a>4 hexo 重新部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将介绍如何去美化一个基于Next主题的博客！&lt;/p&gt;
&lt;h2 id=&quot;1-基础设置&quot;&gt;&lt;a href=&quot;#1-基础设置&quot; class=&quot;headerlink&quot; title=&quot;1. 基础设置&quot;&gt;&lt;/a&gt;1. 基础设置&lt;/h2&gt;&lt;h3 id=&quot;1-1-设置站点名、作者昵称和
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Next主题美化" scheme="http://yoursite.com/tags/Next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>在Linux云服务器上配置Tomcat</title>
    <link href="http://yoursite.com/2019/05/13/%E5%9C%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%85%8D%E7%BD%AETomcat/"/>
    <id>http://yoursite.com/2019/05/13/在云服务器上配置Tomcat/</id>
    <published>2019-05-13T14:00:29.000Z</published>
    <updated>2019-05-15T02:51:18.915Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何在Linux云服务器上或者Linux本地服务器上部署Tomcat环境！</p><h2 id="1-事先准备"><a href="#1-事先准备" class="headerlink" title="1. 事先准备"></a>1. 事先准备</h2><p>在部署之前，提前从官网上下载好对应的tomcat和jdk，jdk1.8之前的下载需要账号密码，在我的上一篇文章里有可以使用。</p><p>这里特别提醒一下：由于是在linux系统上部署，tomcat需要下载以<code>.tar.gz</code>结尾的压缩包，可以为后续节省很多麻烦，jdk则要下载Linux64位的。</p><p>我使用的是<code>apache-tomcat-9.0.19</code>和<code>jdk-8u191-linux-x64.tar</code></p><h2 id="2-将两个压缩包传入服务器中"><a href="#2-将两个压缩包传入服务器中" class="headerlink" title="2. 将两个压缩包传入服务器中"></a>2. 将两个压缩包传入服务器中</h2><p>本地可以下载一个叫做：SecureFX的软件来进行上传文件的操作，连接服务器并且上传压缩包至<code>/opt</code>目录下。</p><h2 id="3-解压文件并删除压缩包"><a href="#3-解压文件并删除压缩包" class="headerlink" title="3. 解压文件并删除压缩包"></a>3. 解压文件并删除压缩包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">tar -zxvf apache-tomcat-9.0.19.tar.gz</span><br><span class="line">tar -zxvf jdk-8u191-linux-x64.tar.gz</span><br><span class="line">rm -rf *.tar.gz</span><br></pre></td></tr></table></figure><h2 id="4-配置jdk"><a href="#4-配置jdk" class="headerlink" title="4. 配置jdk"></a>4. 配置jdk</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>进入到最底下，补充以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/jdk1.8.0_191</span><br><span class="line">export JRE_HOME=/opt/jdk1.8.0_191/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>再不重启服务器的情况下，让配置文件生效并查看安装的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="5-打开防火墙对应的端口号-并重新加载防火墙"><a href="#5-打开防火墙对应的端口号-并重新加载防火墙" class="headerlink" title="5. 打开防火墙对应的端口号,并重新加载防火墙"></a>5. 打开防火墙对应的端口号,并重新加载防火墙</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="6-建一个存放项目的文件夹"><a href="#6-建一个存放项目的文件夹" class="headerlink" title="6. 建一个存放项目的文件夹"></a>6. 建一个存放项目的文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">mkdir www</span><br></pre></td></tr></table></figure><h2 id="7-配置tomcat启动路径"><a href="#7-配置tomcat启动路径" class="headerlink" title="7. 配置tomcat启动路径"></a>7. 配置tomcat启动路径</h2><p>将本地的项目上传到www目录之下，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd apache-tomcat-9.0.19/conf</span><br><span class="line">vim server.xml</span><br></pre></td></tr></table></figure><p>在<code>server.xml</code>中修改端口号<code>8080</code>成<code>80</code>并在最下面的<code></code>前面加入下面代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//以下是我的代码，你们需要自己对应修改</span><br><span class="line">&lt;Context docBase=&quot;/opt/www/h5projects/MHWZ/&quot; path=&quot;/mhwz&quot; reloadable=&quot;false&quot;&lt;/Context&gt;</span><br><span class="line">&lt;Context docBase=&quot;/opt/www/h5projects/ZCOOL/&quot; path=&quot;/zcool&quot; reloadable=&quot;false&quot;&gt;&lt;/Context&gt;</span><br></pre></td></tr></table></figure><h2 id="8-启动tomcat"><a href="#8-启动tomcat" class="headerlink" title="8. 启动tomcat"></a>8. 启动tomcat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../bin</span><br><span class="line">./startup.sh &amp;&amp; tail -f ../logs/catalina.out//启动tomcat并查看日志</span><br></pre></td></tr></table></figure><h2 id="9-运行项目"><a href="#9-运行项目" class="headerlink" title="9. 运行项目"></a>9. 运行项目</h2><p>因为端口设置成<code>80</code>所以直接在浏览器中输入ip/你设置的项目的虚拟路径/主页，就成功了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip/mhwz/mhwz.html</span><br></pre></td></tr></table></figure><h2 id="10-附上一些常用代码"><a href="#10-附上一些常用代码" class="headerlink" title="10 .附上一些常用代码"></a>10 .附上一些常用代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep tomcat//查询进程</span><br><span class="line">kill -9 1060//彻底关闭tomcat，这个1060是查询出来的进程</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将介绍如何在Linux云服务器上或者Linux本地服务器上部署Tomcat环境！&lt;/p&gt;
&lt;h2 id=&quot;1-事先准备&quot;&gt;&lt;a href=&quot;#1-事先准备&quot; class=&quot;headerlink&quot; title=&quot;1. 事先准备&quot;&gt;&lt;/a&gt;1. 事先准备&lt;/h2&gt;&lt;p&gt;在部
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="linux云服务器 tomcat" scheme="http://yoursite.com/tags/linux%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-tomcat/"/>
    
  </entry>
  
  <entry>
    <title>jdk下载账号</title>
    <link href="http://yoursite.com/2019/05/13/jdk%E4%B8%8B%E8%BD%BD%E8%B4%A6%E5%8F%B7/"/>
    <id>http://yoursite.com/2019/05/13/jdk下载账号/</id>
    <published>2019-05-13T07:31:00.000Z</published>
    <updated>2019-05-15T02:52:01.445Z</updated>
    
    <content type="html"><![CDATA[<p>目前在官网下载低于jdk1.8的java jdk的时候需要登陆，从网上收藏了这个账号可以下载用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2696671285@qq.com </span><br><span class="line">密码：Oracle123</span><br></pre></td></tr></table></figure><p><img src="/2019/05/13/jdk下载账号/zh.jpg" alt="账号密码——转自网上"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前在官网下载低于jdk1.8的java jdk的时候需要登陆，从网上收藏了这个账号可以下载用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="账号" scheme="http://yoursite.com/categories/%E8%B4%A6%E5%8F%B7/"/>
    
    
      <category term="jdk" scheme="http://yoursite.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>搭建gitlab服务器</title>
    <link href="http://yoursite.com/2019/05/12/%E6%90%AD%E5%BB%BAgitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2019/05/12/搭建gitlab服务器/</id>
    <published>2019-05-12T04:03:06.000Z</published>
    <updated>2019-05-15T02:53:56.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-上传gitlab压缩包"><a href="#1-上传gitlab压缩包" class="headerlink" title="1. 上传gitlab压缩包"></a>1. 上传gitlab压缩包</h2><p>将下载好的<code>gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm</code>上传到linux服务器的<code>/opt</code>上</p><h2 id="2-执行安装"><a href="#2-执行安装" class="headerlink" title="2. 执行安装"></a>2. 执行安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">vim install.sh</span><br></pre></td></tr></table></figure><p>在install.sh中拷贝下面的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh /opt/gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm</span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server cronie</span><br><span class="line">sudo lokkit -s http -s ssh</span><br><span class="line">sudo yum install postfix</span><br><span class="line">sudo service postfix start</span><br><span class="line">sudo chkconfig postfix on</span><br><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br><span class="line">sudo EXTERNAL_URL=&quot;http://gitlab.example.com&quot; yum -y install gitlab-ce</span><br></pre></td></tr></table></figure><p>改一下install.sh的权限，使其可以执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 install.sh</span><br></pre></td></tr></table></figure><h3 id="执行之前为了保险，为linux系统拍摄一个快照"><a href="#执行之前为了保险，为linux系统拍摄一个快照" class="headerlink" title="执行之前为了保险，为linux系统拍摄一个快照"></a>执行之前为了保险，为linux系统拍摄一个快照</h3><p>执行install.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>时间比较长需要等，执行完毕后重启linux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="3-gitlab服务操作"><a href="#3-gitlab服务操作" class="headerlink" title="3. gitlab服务操作"></a>3. gitlab服务操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure//初始化配置 gitlab（时间很久！）</span><br><span class="line">gitlab-ctl start//启动 gitlab 服务</span><br><span class="line">gitlab-ctl stop//停止 gitlab 服务</span><br></pre></td></tr></table></figure><h2 id="4-浏览器访问"><a href="#4-浏览器访问" class="headerlink" title="4. 浏览器访问"></a>4. 浏览器访问</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service firewalld stop //停止防火墙</span><br></pre></td></tr></table></figure><p>访问 Linux 服务器 IP 地址即可，如果想访问 EXTERNAL_URL 指定的域名还需要配置<br>域名服务器或本地 hosts 文件。<br>初次登录时需要为 gitlab 的 root 用户设置密码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-上传gitlab压缩包&quot;&gt;&lt;a href=&quot;#1-上传gitlab压缩包&quot; class=&quot;headerlink&quot; title=&quot;1. 上传gitlab压缩包&quot;&gt;&lt;/a&gt;1. 上传gitlab压缩包&lt;/h2&gt;&lt;p&gt;将下载好的&lt;code&gt;gitlab-ce-10.
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="gitlab" scheme="http://yoursite.com/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>安装本地的Linux的CentOS7</title>
    <link href="http://yoursite.com/2019/05/12/%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0%E7%9A%84Linux%E7%9A%84CentOS7/"/>
    <id>http://yoursite.com/2019/05/12/安装本地的Linux的CentOS7/</id>
    <published>2019-05-11T16:02:29.000Z</published>
    <updated>2019-05-15T02:53:08.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-新建虚拟机"><a href="#1-新建虚拟机" class="headerlink" title="1. 新建虚拟机"></a>1. 新建虚拟机</h2><ol><li>按照默认提示下一步，到处理器的配置选择两个双核的</li><li>虚拟机的内存设置为：2048MB</li><li>使用NAT</li></ol><h2 id="2-安装系统"><a href="#2-安装系统" class="headerlink" title="2. 安装系统"></a>2. 安装系统</h2><ol><li>选择中文</li><li>到了-安装信息摘要-的地方，等一会儿</li><li>点击-软件选择-</li><li>选中-GNOME桌面-，-传统X Windows系统的兼容性-，-完成-</li><li>然后选择-安装位置-</li><li>选择-我要配置分区-</li><li>点击-完成-</li><li>点击-自动创建-</li><li>设置root密码</li><li>等待安装，并重启</li></ol><h2 id="3-设置ip地址"><a href="#3-设置ip地址" class="headerlink" title="3. 设置ip地址"></a>3. 设置ip地址</h2><p>打开终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts</span><br><span class="line">ll|less</span><br><span class="line">su root</span><br><span class="line">vim ifcfg-ens33</span><br></pre></td></tr></table></figure><p>编辑ifcfg-ens33文件</p><p><img src="/2019/05/12/安装本地的Linux的CentOS7/ifcfg-ens33.png" alt="ifcfg-ens33"></p><h2 id="4-查看是否配置成功，并且ping一下外网"><a href="#4-查看是否配置成功，并且ping一下外网" class="headerlink" title="4. 查看是否配置成功，并且ping一下外网"></a>4. 查看是否配置成功，并且ping一下外网</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">ping www.baidu.com -c 3</span><br></pre></td></tr></table></figure><h2 id="5-windows-ping一下linux"><a href="#5-windows-ping一下linux" class="headerlink" title="5. windows ping一下linux"></a>5. windows ping一下linux</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping xxx.xxx.xx.xxx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-新建虚拟机&quot;&gt;&lt;a href=&quot;#1-新建虚拟机&quot; class=&quot;headerlink&quot; title=&quot;1. 新建虚拟机&quot;&gt;&lt;/a&gt;1. 新建虚拟机&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;按照默认提示下一步，到处理器的配置选择两个双核的&lt;/li&gt;
&lt;li&gt;虚拟机的内存设置
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个简易博客</title>
    <link href="http://yoursite.com/2019/05/11/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/05/11/搭建一个简易博客/</id>
    <published>2019-05-11T11:48:00.000Z</published>
    <updated>2019-05-15T02:54:47.319Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何搭建一个基于Hexo的个人博客！</p><h2 id="1-本地搭建"><a href="#1-本地搭建" class="headerlink" title="1. 本地搭建"></a>1. 本地搭建</h2><h3 id="1-1-下载并安装Node-js和git"><a href="#1-1-下载并安装Node-js和git" class="headerlink" title="1.1 下载并安装Node.js和git"></a>1.1 下载并安装Node.js和git</h3><p>其中npm会和Node.js一起装进来，不需要单独下载</p><h3 id="1-2-安装淘宝镜像cnpm"><a href="#1-2-安装淘宝镜像cnpm" class="headerlink" title="1.2 安装淘宝镜像cnpm"></a>1.2 安装淘宝镜像cnpm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="1-3-安装hexo-cli"><a href="#1-3-安装hexo-cli" class="headerlink" title="1.3 安装hexo-cli"></a>1.3 安装hexo-cli</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="1-4-查看hexo是否安装成功"><a href="#1-4-查看hexo是否安装成功" class="headerlink" title="1.4 查看hexo是否安装成功"></a>1.4 查看hexo是否安装成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>找一个合适的位置建一个空文件夹，进入该目录下..</p><h3 id="1-5-初始化一个博客"><a href="#1-5-初始化一个博客" class="headerlink" title="1.5 初始化一个博客"></a>1.5 初始化一个博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>Linux下在前面加上：<code>sudo</code></p><h3 id="1-6-启动预览博客"><a href="#1-6-启动预览博客" class="headerlink" title="1.6 启动预览博客"></a>1.6 启动预览博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在浏览器输入<code>localhost:4000</code>本地预览博客</p><h3 id="1-7-停止预览"><a href="#1-7-停止预览" class="headerlink" title="1.7 停止预览"></a>1.7 停止预览</h3><p>按住：control+c</p><h3 id="1-8-写一篇文章"><a href="#1-8-写一篇文章" class="headerlink" title="1.8 写一篇文章"></a>1.8 写一篇文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的第一篇文章&quot;</span><br></pre></td></tr></table></figure><p>找到生成的.md文件，用各种编辑器就可以写文章</p><h3 id="1-9-重新预览博客"><a href="#1-9-重新预览博客" class="headerlink" title="1.9 重新预览博客"></a>1.9 重新预览博客</h3><p>每次重新预览最好做以下步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean // 清除缓存</span><br><span class="line">hexo g //生成本地文件</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="2-云端部署"><a href="#2-云端部署" class="headerlink" title="2. 云端部署"></a>2. 云端部署</h2><h3 id="2-1-安装hexo-deployer-git"><a href="#2-1-安装hexo-deployer-git" class="headerlink" title="2.1 安装hexo-deployer-git"></a>2.1 安装hexo-deployer-git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h3 id="2-2-配置-config-yml"><a href="#2-2-配置-config-yml" class="headerlink" title="2.2 配置_config.yml"></a>2.2 配置_config.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意冒号后面要加空格</p><h3 id="2-3-部署到github"><a href="#2-3-部署到github" class="headerlink" title="2.3 部署到github"></a>2.3 部署到github</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>至此一个简易的、基础的博客搭建完成！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文将介绍如何搭建一个基于Hexo的个人博客！&lt;/p&gt;
&lt;h2 id=&quot;1-本地搭建&quot;&gt;&lt;a href=&quot;#1-本地搭建&quot; class=&quot;headerlink&quot; title=&quot;1. 本地搭建&quot;&gt;&lt;/a&gt;1. 本地搭建&lt;/h2&gt;&lt;h3 id=&quot;1-1-下载并安装Node-js
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="简易博客" scheme="http://yoursite.com/tags/%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>git和github之间的操作</title>
    <link href="http://yoursite.com/2019/05/10/git%E5%92%8Cgithub%E4%B9%8B%E9%97%B4%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/05/10/git和github之间的操作/</id>
    <published>2019-05-10T15:42:00.000Z</published>
    <updated>2019-05-15T02:55:10.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-注册github账号，并创建远程库"><a href="#1-注册github账号，并创建远程库" class="headerlink" title="1. 注册github账号，并创建远程库"></a>1. 注册github账号，并创建远程库</h2><p>唯一要注意的一点就是绑定邮箱不要用163的，因为有时可能会接收不到github的邮件，这里推荐可以用aliyun的邮箱</p><h2 id="2-创建远程库地址别名"><a href="#2-创建远程库地址别名" class="headerlink" title="2. 创建远程库地址别名"></a>2. 创建远程库地址别名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v //查看当前所有远程地址别名</span><br><span class="line">git remote add [别名] [远程地址]</span><br></pre></td></tr></table></figure><h2 id="3-推送"><a href="#3-推送" class="headerlink" title="3. 推送"></a>3. 推送</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [别名] [分支名]</span><br></pre></td></tr></table></figure><h2 id="4-克隆"><a href="#4-克隆" class="headerlink" title="4. 克隆"></a>4. 克隆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git origin [远程地址]</span><br></pre></td></tr></table></figure><h3 id="克隆的效果"><a href="#克隆的效果" class="headerlink" title="克隆的效果"></a>克隆的效果</h3><ol><li>完整的把远程库下载到本地</li><li>创建 origin 远程地址别名</li><li>初始化本地库</li></ol><h2 id="5-拉取"><a href="#5-拉取" class="headerlink" title="5. 拉取"></a>5. 拉取</h2><p>pull=fetch+merge</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch [远程库地址别名] [远程分支名]</span><br><span class="line">git merge [远程库地址别名/远程分支名]</span><br><span class="line">git pull [远程库地址别名] [远程分支名]</span><br></pre></td></tr></table></figure><h2 id="6-SSH登录"><a href="#6-SSH登录" class="headerlink" title="6. SSH登录"></a>6. SSH登录</h2><p>进入当前用户的家目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~</span><br></pre></td></tr></table></figure><p>删除.ssh 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rvf .ssh</span><br></pre></td></tr></table></figure><p>运行命令生成.ssh 密钥目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C xxxx@aliyun.com</span><br><span class="line">[注意：这里-C 这个参数是大写的 C]</span><br></pre></td></tr></table></figure><p>进入.ssh 目录查看文件列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd .ssh</span><br><span class="line">$ ls -lF</span><br></pre></td></tr></table></figure><p>查看 id_rsa.pub 文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG<br>keys→New SSH Key→输入复制的密钥信息</p><p>回到 Git bash 创建远程地址别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin_ssh git@github.com:xxx/xxx.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-注册github账号，并创建远程库&quot;&gt;&lt;a href=&quot;#1-注册github账号，并创建远程库&quot; class=&quot;headerlink&quot; title=&quot;1. 注册github账号，并创建远程库&quot;&gt;&lt;/a&gt;1. 注册github账号，并创建远程库&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git &amp; github" scheme="http://yoursite.com/tags/git-github/"/>
    
  </entry>
  
  <entry>
    <title>git的命令行操作</title>
    <link href="http://yoursite.com/2019/05/10/git%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/05/10/git的命令行操作/</id>
    <published>2019-05-10T01:22:39.000Z</published>
    <updated>2019-05-15T02:55:34.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-本地库初始化"><a href="#1-本地库初始化" class="headerlink" title="1. 本地库初始化"></a>1. 本地库初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure><h2 id="2-设置签名"><a href="#2-设置签名" class="headerlink" title="2. 设置签名"></a>2. 设置签名</h2><p>项目级别/仓库级别：仅在当前本地库范围内有效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name jacob</span><br><span class="line">git config user.email xxxx@163.com</span><br></pre></td></tr></table></figure><p>系统用户级别：登录当前操作系统的用户范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name jacob</span><br><span class="line">git config --global xxxx@163.com</span><br></pre></td></tr></table></figure><p>信息保存位置：~/.gitconfig 文件</p><h2 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3. 基本操作"></a>3. 基本操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status//查看工作区、暂存区状态</span><br><span class="line">git add [file name]//将工作区的“新建/修改”添加到暂存区</span><br><span class="line">git commit -m &quot;commit message&quot; [file name]//将暂存区的内容提交到本地库</span><br><span class="line">git reflog//查看历史记录，多屏显示控制方式：空格向下翻页，b 向上翻页，q 退出</span><br></pre></td></tr></table></figure><h2 id="4-前进和后退版本"><a href="#4-前进和后退版本" class="headerlink" title="4. 前进和后退版本"></a>4. 前进和后退版本</h2><p>基于索引值操作[推荐]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard a6ace91</span><br></pre></td></tr></table></figure><h2 id="5-比较文件差异"><a href="#5-比较文件差异" class="headerlink" title="5. 比较文件差异"></a>5. 比较文件差异</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff [文件名]//将工作区中的文件和暂存区进行比较</span><br><span class="line">git diff [本地库中历史版本] [文件名]//将工作区中的文件和本地库历史记录比较</span><br></pre></td></tr></table></figure><h2 id="6-分支操作"><a href="#6-分支操作" class="headerlink" title="6. 分支操作"></a>6. 分支操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch [分支名]//git branch [分支名]</span><br><span class="line">git branch -v//查看分支</span><br><span class="line">git checkout [分支名]//切换分支</span><br><span class="line">git checkout [被合并分支名]//合并分支第一步：切换到接受修改的分支（被合并，增加新内容）上</span><br><span class="line">git merge [有新内容分支名]//第二步执行 merge 命令</span><br></pre></td></tr></table></figure><h2 id="7-解决冲突"><a href="#7-解决冲突" class="headerlink" title="7. 解决冲突"></a>7. 解决冲突</h2><ol><li>编辑文件，删除特殊符号</li><li>把文件修改到满意的程度，保存退出</li><li>git add [文件名]</li><li>git commit -m “日志信息”    （注意：此时 commit 一定不能带具体文件名）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-本地库初始化&quot;&gt;&lt;a href=&quot;#1-本地库初始化&quot; class=&quot;headerlink&quot; title=&quot;1. 本地库初始化&quot;&gt;&lt;/a&gt;1. 本地库初始化&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
